import React from 'react'
import { within } from '@testing-library/react'
import { actRender } from '../../test/utilities'
import List from './List'

beforeEach(() => {
  jest.clearAllMocks()
})

describe('if there are no entries', () => {
  test('element generated by the render callback is rendered', async () => {
    const { queryByTestId } = await actRender(
      <List
        entries={[]}
        renderEntry={(entry) => <span key={entry.id}>{entry.name}</span>}
        renderNoEntries={() =>
          <span data-testid='__no_entries'>
            Hello World!
          </span>
        } />
    )
    const message = await queryByTestId('__no_entries')
    expect(message).toBeInTheDocument()
  })

  test('no-entries render callback is called if provided', async () => {
    const mockRender = jest.fn(() => <span data-testid='__no_entries'>Hello World!</span>)
    await actRender(
      <List
        entries={[]}
        renderEntry={(entry) => <span key={entry.id}>{entry.name}</span>}
        renderNoEntries={mockRender} />
    )

    expect(mockRender).toBeCalled()
  })

  test('some alert is rendeerd by default', async () => {
    const { getByTestId } = await actRender(
      <List
        entries={[]}
        renderEntry={(entry) => <span key={entry.id}>{entry.name}</span>}
      />)
    const message = within(getByTestId('list')).getByRole('alert')
    expect(message).toBeInTheDocument()
  })
})

describe('when there are entries', () => {
  test('an entry is rendered', async () => {
    const entries = [{
      name: 'Pizza',
      id: 1
    }]

    const mockRender = jest.fn((entry) => 
      <span key={entry.id} data-testid='__entry'>Hello World!</span>)
    const { getByTestId } = await actRender(
      <List entries={entries} renderEntry={mockRender} />
    )

    const item = within(getByTestId('list')).getByTestId('__entry')
    expect(item).toBeInTheDocument()
  })

  test('the render callback is called', async () => {
    const entries = [{
      name: 'Pizza',
      id: 1
    }]

    const mockRender = jest.fn((entry) => 
      <span key={entry.id} data-testid='__entry'>Hello World!</span>)
    await actRender(
      <List entries={entries} renderEntry={mockRender} />
    )

    expect(mockRender).toBeCalled()
  })

  test('multiple categories are rendered if more than one exist', async () => {
    const entries = [
      {
        name: 'Pizza',
        id: 1
      },
      {
        name: 'Cats',
        id: 2
      },
      {
        name: 'FooBar',
        id: 3
      },
    ]

    const mockRender = jest.fn((entry) => 
      <span key={entry.id} data-testid='__entry'>Hello World!</span>)
    const { getByTestId } = await actRender(
      <List entries={entries} renderEntry={mockRender} />
    )

    const items = within(getByTestId('list')).getAllByTestId('__entry')
    expect(items).toHaveLength(3)
  })
})

